class Solution {
public: /*instead of all these codes we can simply use the inbuild funcn next_permutation(A.begin() , A.end())*/
    void nextPermutation(vector<int>& A) { //O(n) TC & O(1) SC
        //find pivot
        int pivot = -1 , n =A.size();
        for(int i = n-2; i>=0;i--){
            if(A[i] < A[i+1]){
                pivot = i;
                break;
            }
        }

        if(pivot == -1){
            reverse(A.begin() , A.end()); /*if we dindnt find pivot it will reverse and give next permuttation i.e. smallest value(in place change)*/
            return;
        }
        //to find next larger element
        for(int i = n-1;i>pivot;i--){
            if(A[i] > A[pivot]){
                swap(A[i] , A[pivot]);
                break;

            }
        }

        //reverse pivot+1 to n-1
        // reverse(A.begin() + pivot+1, A.end()); alternate method
        int i = pivot+1 , j = n-1;
        while(i<=j){
            swap(A[i++] , A[j--]);
            
        }
    }
};
