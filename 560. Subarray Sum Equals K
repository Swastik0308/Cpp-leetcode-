



class Solution {
public:
    int subarraySum(vector<int>& nums, int k) {
        //Brute force approach TC:O(n^2) SC:O(1) this code will run and submit successfully
        // int n = nums.size();
        // int count = 0;
        // for(int i=0;i<n;i++){ //starting point
        // int sum = 0;
        // for(int j=i;j<n;j++){ //ending point
        // sum += nums[j];
        // if(sum == k) count++;
        // }
        // }
        // return count;


        //Optimized approach , here we use the concept of prefix sum TC: O(n) SC:O(n)

        int n = nums.size();
        int count = 0;
        vector<int> prefixSum(n , 0);
        prefixSum[0] = nums[0];
         for(int i=1;i<n;i++){ //logic to calculate prefix sum
            prefixSum[i] = prefixSum[i-1] + nums[i];
         }
         unordered_map<int , int> m;//we store prefix sum and freq
         for(int j=0;j<n;j++){
            if(prefixSum[j] == k) count++;
            int val = prefixSum[j] - k;
            if(m.find(val) != m.end()){ //Value found
            count += m[val]; //add the value of corresponding freq
            }
             if(m.find(prefixSum[j]) == m.end()){//Not found
                m[prefixSum[j]] = 0;
             }
              m[prefixSum[j]]++;
         }
         return count;
    }
};
