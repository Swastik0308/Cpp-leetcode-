class Solution {
public: //TC: O(n * 2^n)
    void getAllSubsets(vector<int>& nums , vector<int>& ans , int i ,  vector<vector<int>> &allSubset){
        if(i == nums.size()){
            //store
            allSubset.push_back(ans);
            return;
        }

        //include
        ans.push_back(nums[i]);
        getAllSubsets(nums , ans , i+1 , allSubset);

        ans.pop_back();

        int idx = i+1; //we have to initialize idx to skip duplicates
        while(idx < nums.size() && nums[idx] == nums[idx-1]){ //to avoid duplicate elements
                idx++;
        }

        //exclude
        getAllSubsets(nums , ans , idx , allSubset);

    }
    vector<vector<int>> subsetsWithDup(vector<int>& nums) {
        sort(nums.begin() , nums.end());
        vector<vector<int>> allSubset;
        vector<int> ans;
        getAllSubsets(nums , ans , 0 , allSubset);
        return allSubset;
        
    }
};
